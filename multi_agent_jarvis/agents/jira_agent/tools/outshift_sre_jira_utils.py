# Copyright 2025 CNOE
# SPDX-License-Identifier: Apache-2.0

import os

from typing import List
from multi_agent_jarvis.setup_logging import logging
from langchain_core.tools import tool

from multi_agent_jarvis.agents.jira_agent.tools._jira_instance import JiraInstanceManager
from multi_agent_jarvis.agents.jira_agent.tools.utils import _urlify_jira_issue_id
from multi_agent_jarvis.agents.jira_agent.tools.jira_user import _get_account_id_from_email
from multi_agent_jarvis.agents.jira_agent.tools.jira_search import _retrieve_multiple_jira_issues


JIRA_SERVICE_DESK_PROJECT = os.getenv("JIRA_SERVICE_DESK_PROJECT")

async def _create_outshift_service_desk_ticket(
  summary: str,
  description: str,
  user_email: str,
  project=JIRA_SERVICE_DESK_PROJECT,
  label="JARVIS_AUTOMATION_TRACKING",
) -> tuple:
  """
  Create a Jira service desk ticket with the given details.

  Args:
    summary (str): The summary of the ticket.
    description (str): The description of the ticket.
    user_email (str): The email of the user reporting the issue.
    project (str, optional): The Jira project to create the ticket in. Defaults to OPENSD.

  Returns:
    tuple: A message indicating the result of the ticket creation.
      If successful, returns the ticket ID. Otherwise, returns an error message and JIRA issue key.
  """
  logging.info(
    f"Creating service desk ticket with summary: {summary}, description: {description}, user_email: {user_email}, project: {project}"
  )

  if os.getenv("JARVIS_DRYRUN") == "True":
    return "<dryrun-placeholder-ticket-response>", None

  # Set default priority to 'P3'. We won't give the user a choice
  # to select priority until the issue is triaged by the service desk.
  priority = "P3"

  logging.info(
    f"Creating service desk ticket with summary: {summary}, description: {description}, user_email: {user_email}"
  )
  if "@" not in user_email or "." not in user_email:
    logging.info("Invalid email address.")
    return "Invalid email address.", None

  description += f"\n\nReported by: {user_email}"
  description += "\n\nGenerated by Jarvis Assistant!"
  account_id = await _get_account_id_from_email(user_email)
  logging.info(f"Account ID for user {user_email}: {account_id}")
  try:
    jira_api = JiraInstanceManager.get_jira_instance()
    issue_dict = {
      "project": {"key": project},
      "summary": summary,
      "description": description,
      "issuetype": {"id": "10423"},
      "priority": {"name": priority},
      "reporter": {"id": account_id},
      "labels": [label],
      "customfield_10017": "st/getithelp",
    }
    new_issue = jira_api.create_issue(fields=issue_dict)
    logging.info(f"New issue created: {new_issue.key}")
    urlify_jira_issue_id = await _urlify_jira_issue_id(new_issue.key)
    return (
      f"A ticket was created successfully, you can view here - [{new_issue.key} : {summary}]({urlify_jira_issue_id}).",
      new_issue.key,
    )
  except Exception as e:
    logging.error(f"Error in ticket creation tool: {e}")
    return "An error occurred while creating the ticket.", None


@tool
async def create_outshift_service_desk_ticket(summary: str, description: str, user_email: str) -> str:
  """
  Create a Jira service desk ticket with the given details.

  Args:
    summary (str): The summary of the ticket.
    description (str): The description of the ticket.
    user_email (str): The email of the user reporting the issue.

  Returns:
    str: A message indicating the result of the ticket creation. If successful, returns the ticket ID. Otherwise, returns an error message.
  """
  logging.info(
    f"Creating service desk ticket with summary: {summary}, description: {description}, user_email: {user_email}"
  )
  response, _ = await _create_outshift_service_desk_ticket(
    summary=summary, description=description, user_email=user_email, label="JARVIS_USER_REQUEST"
  )
  return response


@tool
async def retrieve_outshift_service_desk_tickets(user_email: str, num_jira_issues_to_retrieve: int) -> List:
  """
  Retrieve the top n Outshift SRE Jira service desk tickets for a given user.

  Args:
    user_email (str): The email of the user whose tickets are to be retrieved.
    num_jira_issues_to_retrieve (int): The number of tickets to retrieve. Defaults to 5.

  Returns:
    List: A list of the retrieved Jira tickets. If an error occurs, returns an error message.
  """
  project = JIRA_SRE_SERVICE_DESK_PROJECT
  logging.info(
    f"Retrieving top {num_jira_issues_to_retrieve} service desk tickets for user: {user_email} in project: {project}"
  )

  try:
    issues = await _retrieve_multiple_jira_issues(
      user_email=user_email,
      project=project,
      num_jira_issues_to_retrieve=num_jira_issues_to_retrieve,
    )
    logging.info(f"Retrieved {len(issues)} issues for user {user_email}")
    return issues
  except Exception as e:
    logging.error(f"Error retrieving tickets: {e}")
    return ["An error occurred while retrieving the tickets."]
